{"version":3,"sources":["components/navigation/Nav.js","components/orders/OrderCard.js","components/orders/JoinDialogSurface.js","components/orders/JoinDialog.js","pages/Orders.js","components/order-details/DetailExtraDialog.js","components/order-details/DetailContent.js","pages/OrderDetails.js","components/orders/CreateReciept.js","components/orders/PayOrderContent.js","pages/PayOrder.js","components/dishes/DishCard.js","components/dishes/DishDialog.js","pages/Dishes.js","components/settings/GlobalSettings.js","components/settings/DishTypeDialog.js","components/settings/DishTypes.js","pages/Settings.js","pages/History.js","components/extras/ExtraCard.js","components/extras/ExtraDialog.js","pages/DishExtra.js","App.js","serviceWorker.js","stores/Store.js","index.js"],"names":["handleSearchText","props","setSearchText","e","target","value","store","searchText","toggleSearch","searching","setSearching","closeModal","setIsModalOpen","inject","observer","useState","isModalOpen","dense","fixed","className","alignStart","placeholder","autoFocus","onChange","aria-label","icon","alt","onClick","Fragment","kitchenMode","alignEnd","modal","open","onClose","to","MADE","gql","handleDishClick","id","i","made","dishes","map","d","dish","_id","hasPayed","delivered","extras","variables","useMutation","style","padding","use","tag","table","name","theme","v","disabledKitchen","disabledServer","key","graphic","disabled","text","secondaryText","join","ripple","getDishes","notes","_","openJoinCard","JOIN","joinOrders","people","ordersToJoin","filter","s","selected","ids","JoinOrderSurface","data","o","setPeople","useEffect","length","some","p","idx","handleJoin","action","isDefaultAction","GET_ORDERS","JoinOrder","useQuery","pollInterval","loading","error","orders","title","body","message","dialogOpen","closeDialog","JoinDialogSurface","Order","joinProps","setJoinProps","setDialogState","console","warn","getLoadingBar","matchesFilter","RegExp","toString","test","type","order","width","maxWidth","minWidth","getFilteredOrders","JoinDialog","onDelete","setSelectedExtras","onCancel","onSave","selectedExtras","addExtra","concat","DetailExtraDialog","anyExtras","sort","a","b","label","ADD_ORDER","UPDATE_ORDER","removeDish","setDishes","newDishes","saveExtras","selectedDishId","DetailContent","setName","dialogState","setTable","setNotes","typeName","activeTabIndex","setActiveTabIndex","reduce","c","push","getDishTypes","dishTypes","Object","keys","setSelectedDishId","selectableExtras","setSelectableExtras","useParams","history","useHistory","addOrUpdate","result","parseInt","goBack","span","String","onActivate","evt","detail","index","occur","addDish","meta","getDishesForType","setDialog","allDishes","currentDish","find","deselectedExtras","selectDish","activated","min","inputMode","pattern","textarea","fullwidth","undefined","GET_ORDER","GET_DISHES","OrderDetails","orderResult","getDetailContent","dishExtras","z","CreateReceipt","totalCosts","f","cost","toFixed","query","company","street","postalCode","city","website","taxId","dateTime","Date","toLocaleString","split","align","PAY","toggleSelection","setSelectAll","paying","every","toggleAll","selectAll","changePayment","setPaying","isNaN","parseFloat","PayOrderContent","dishesToPay","pay","m","total","payedDishes","amountPayed","updateOrder","extraCost","basename","invalid","window","print","PayOrder","getOrderDetails","DishCard","setDevice","setIsDialogOpen","margin","twoLine","metaIcon","ADD","UPDATE","REMOVE","GET_DISH_EXTRAS","handleDeselectedExtraChange","setDeselectedExtras","indexOf","chipId","DishDialog","setCost","setType","de","remove","typeId","options","checkmark","onInteraction","floatCost","GET_DISH_TYPES","device","isDialogOpen","dishTypesResult","grouped","xs","func","rv","x","groupedDishes","group","setKitchenMode","DishTypeDialog","isNewDishType","DishTypes","dialogContent","setDialogContent","Settings","setHistoryFilter","setMinOrderTimestamp","setHeader","tmsp","day","getDay","diff","getDate","setDate","getMonday","toDateString","ORDERS","History","menuIsOpen","setMenuIsOpen","minOrderTimestamp","header","page","setPage","itemsPerPage","ordered","totalWithTips","ordersInRange","timestamp","forEach","onSelect","blob","Blob","toISOString","encoding","FileSaver","saveAs","orderBlob","downloadData","slice","rowsPerPageOptions","count","rowsPerPage","onChangePage","newPage","ExtraCard","openDialog","ExtraDialog","isNewExtra","toggleDialog","setExtra","setOpenDialog","extra","groupedExtras","App","Component","render","exact","path","component","Orders","Dishes","Hist","Extras","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","Store","localStorage","getItem","isOn","this","setItem","decorate","observable","DefaultStore","client","ApolloClient","stores","ReactDOM","primary","secondary","background","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b9471734.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {inject, observer} from 'mobx-react'\r\nimport {\r\n  TopAppBar,\r\n  TopAppBarRow,\r\n  TopAppBarSection,\r\n  TopAppBarActionItem,\r\n  TopAppBarTitle,\r\n  TopAppBarNavigationIcon\r\n} from '@rmwc/top-app-bar'\r\nimport {\r\n  List,\r\n  ListItemGraphic,\r\n  ListItem,\r\n  ListItemText\r\n} from '@rmwc/list'\r\nimport {\r\n  Drawer,\r\n  DrawerHeader,\r\n  DrawerContent,\r\n  DrawerTitle\r\n} from '@rmwc/drawer'\r\nimport {\r\n  Link\r\n} from 'react-router-dom'\r\nimport './Nav.css'\r\n\r\nconst handleSearchText = (props, setSearchText) => (e) => {\r\n  setSearchText(e.target.value)\r\n  props.store.searchText = e.target.value\r\n}\r\n\r\nfunction toggleSearch(props, setSearchText, searching, setSearching) {\r\n  setSearching(!searching)\r\n  setSearchText('')\r\n  props.store.searchText = ''\r\n}\r\n\r\nconst closeModal = (setIsModalOpen) => () => {\r\n  setIsModalOpen(false)\r\n}\r\nconst Nav = (props) => {\r\n\r\n  const [searching, setSearching] = useState(false)\r\n  const [searchText, setSearchText] = useState('')\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  if (searching)\r\n    return (\r\n      <TopAppBar dense fixed>\r\n        <TopAppBarRow>\r\n          <TopAppBarSection className=\"search-field\" alignStart>\r\n            <input placeholder=\"Search\" autoFocus value={searchText} onChange={handleSearchText(props, setSearchText)} />\r\n            <TopAppBarActionItem aria-label=\"Search\" icon=\"clear\" alt=\"Search this Page\" onClick={() => toggleSearch(props, setSearchText, searching, setSearching)} />\r\n          </TopAppBarSection>\r\n        </TopAppBarRow>\r\n      </TopAppBar>\r\n    )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TopAppBar dense fixed className=\"no-print\">\r\n        <TopAppBarRow>\r\n          <TopAppBarSection alignStart>\r\n            <TopAppBarNavigationIcon icon=\"menu\" onClick={() => setIsModalOpen(true)} />\r\n            <TopAppBarTitle>{props.store.kitchenMode ? \"BIt's Kitchen\" : \"BIt\"}</TopAppBarTitle>\r\n          </TopAppBarSection>\r\n          <TopAppBarSection alignEnd>\r\n            <TopAppBarActionItem aria-label=\"Search\" icon=\"search\" alt=\"Search this Page\" onClick={() => toggleSearch(props, setSearchText, searching, setSearching)} />\r\n          </TopAppBarSection>\r\n        </TopAppBarRow>\r\n      </TopAppBar>\r\n\r\n      <Drawer\r\n        modal\r\n        open={isModalOpen}\r\n        onClose={closeModal(setIsModalOpen)}\r\n      >\r\n        <DrawerHeader>\r\n          <DrawerTitle>Menu</DrawerTitle>\r\n        </DrawerHeader>\r\n        <DrawerContent>\r\n          <List>\r\n            <Link to=\"/orders\">\r\n              <ListItem onClick={closeModal(setIsModalOpen)}>\r\n                <ListItemGraphic icon=\"shopping_cart\" />\r\n                <ListItemText>Orders</ListItemText>\r\n              </ListItem>\r\n            </Link>\r\n            <Link to=\"/orderHistory\">\r\n              <ListItem onClick={closeModal(setIsModalOpen)}>\r\n                <ListItemGraphic icon=\"history\" />\r\n                <ListItemText>History</ListItemText>\r\n              </ListItem>\r\n            </Link>\r\n            <Link to=\"/dishes\">\r\n              <ListItem onClick={closeModal(setIsModalOpen)}>\r\n                <ListItemGraphic icon=\"shopping_basket\" />\r\n                <ListItemText>Dishes</ListItemText>\r\n              </ListItem>\r\n            </Link>\r\n            <Link to=\"/dishExtra\">\r\n              <ListItem onClick={closeModal(setIsModalOpen)}>\r\n                <ListItemGraphic icon=\"loyalty\" />\r\n                <ListItemText>Extras</ListItemText>\r\n              </ListItem>\r\n            </Link>\r\n            <Link to=\"/settings\">\r\n              <ListItem onClick={closeModal(setIsModalOpen)}>\r\n                <ListItemGraphic icon=\"settings\" />\r\n                <ListItemText>Settings</ListItemText>\r\n              </ListItem>\r\n            </Link>\r\n          </List>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default inject(\"store\")(observer(Nav))","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardPrimaryAction,\r\n  CardActionIcon,\r\n  CardActions,\r\n  CardActionButtons,\r\n  CardActionButton,\r\n  CardActionIcons\r\n} from '@rmwc/card';\r\nimport {\r\n  List,\r\n  SimpleListItem\r\n} from '@rmwc/list';\r\nimport {gql} from 'apollo-boost';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {observer, inject} from \"mobx-react\";\r\nimport {Typography} from '@rmwc/typography';\r\n\r\nimport './card.css';\r\n\r\nconst MADE = gql`\r\n  mutation updateOrder($id: ID!, $dishes: [orderDishMutation]!){\r\n    updateOrder(_id: $id, dishes: $dishes){\r\n      _id,\r\n      name,\r\n      table,\r\n      notes,\r\n      dishes {\r\n        dish {\r\n          _id,\r\n          name,\r\n          cost\r\n        },\r\n        made,\r\n        delivered,\r\n        hasPayed\r\n      }\r\n    }\r\n  }`\r\n\r\nfunction handleDishClick(id, i, made, props) {\r\n  return () => {\r\n    const dishes = props.dishes.map(d => ({id: d.dish._id, made: d.made, hasPayed: d.hasPayed, delivered: d.delivered, extras: d.extras.map(e => e._id)}))\r\n\r\n    if (props.store.kitchenMode) {\r\n      if (dishes[i].delivered) return;\r\n      dishes[i].made = !dishes[i].made;\r\n    } else {\r\n      if (!dishes[i].made) return;\r\n      dishes[i].delivered = !dishes[i].delivered;\r\n    }\r\n\r\n    made({\r\n      variables: {\r\n        id: id,\r\n        dishes: dishes\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction getDishes(props, made) {\r\n  return props.dishes.map((v, i) => {\r\n    const disabledKitchen = props.store.kitchenMode && v.delivered;\r\n    const disabledServer = !props.store.kitchenMode && !v.made;\r\n    return (\r\n      <SimpleListItem key={i} className={v.delivered ? \"done\" : \"\"}\r\n        graphic={\r\n          v.made ? (v.delivered ? \"done_all\" : \"done\") : \"radio_button_unchecked\"\r\n        }\r\n        onClick={handleDishClick(props._id, i, made, props)}\r\n        disabled={disabledKitchen || disabledServer}\r\n        text={v.dish.name}\r\n        secondaryText={v.extras.map(e => e.name).join(\", \")}\r\n        ripple={v.made} />)\r\n  })\r\n}\r\n\r\nconst OrderCard = (props) => {\r\n  const [made] = useMutation(MADE);\r\n  return (\r\n    <Card>\r\n      <Link to={`/orderDetails/${props._id}`}>\r\n        <CardPrimaryAction>\r\n          <div style={{padding: '0 1rem 1rem 1rem'}}>\r\n            <Typography use=\"headline6\" tag=\"h2\" style={{}}>\r\n              <span className=\"highlight\">{props.table}</span> {props.name}\r\n            </Typography>\r\n          </div>\r\n        </CardPrimaryAction>\r\n      </Link>\r\n      <div style={{padding: '0 1rem 1rem 1rem'}}>\r\n        <Typography use=\"body1\" tag=\"div\" theme=\"textSecondaryOnBackground\">\r\n          <List className=\"extendSecondaryText\">\r\n            {getDishes(props, made)}\r\n          </List>\r\n        </Typography>\r\n      </div>\r\n      <Typography\r\n        use=\"subtitle1\"\r\n        tag=\"div\"\r\n        style={{padding: '0.5rem 1rem'}}\r\n        theme=\"textSecondaryOnBackground\"\r\n      >\r\n        {props.notes}\r\n      </Typography>\r\n      <CardActions>\r\n        <CardActionButtons>\r\n          <CardActionButton onClick={_ => props.openJoinCard(props)} >\r\n            Join\r\n          </CardActionButton>\r\n        </CardActionButtons>\r\n        <CardActionIcons>\r\n          <Link to={`/payOrder/${props._id}`}>\r\n            <CardActionIcon icon=\"credit_card\" />\r\n          </Link>\r\n        </CardActionIcons>\r\n      </CardActions>\r\n    </Card>)\r\n}\r\n\r\nexport default inject(\"store\")(observer(OrderCard))\r\n","import React, {useState, useEffect} from 'react'\r\nimport {\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogButton\r\n} from '@rmwc/dialog';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemGraphic,\r\n} from '@rmwc/list';\r\nimport {gql} from 'apollo-boost';\r\nimport {useMutation} from '@apollo/react-hooks';\r\n\r\nconst JOIN = gql`\r\n  mutation join($id: ID!, $ids: [ID]!){\r\n    joinOrders(_id: $id, orderIds: $ids){\r\n      _id,\r\n      name,\r\n      table,\r\n      dishes {\r\n        dish {\r\n          _id,\r\n          name,\r\n          cost\r\n        },\r\n        made,\r\n        hasPayed,\r\n        extras {\r\n          _id,\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\nfunction handleJoin(i, people, setPeople) {\r\n  const selected = people.map((p, idx) => idx === i ? {...p, selected: !p.selected} : p)\r\n  setPeople(selected)\r\n}\r\n\r\nfunction joinOrders(join, people, id) {\r\n  return () => {\r\n    const ordersToJoin = people.filter(s => s.selected).map(s => s.id)\r\n    debugger\r\n    join({variables: {id: id, ids: ordersToJoin}})\r\n  }\r\n}\r\n\r\nconst JoinOrderSurface = (props) => {\r\n\r\n  const [people, setPeople] = useState(props.data.map(o => ({id: o._id, name: o.name, selected: false})))\r\n\r\n  useEffect(() => {\r\n    if (props.data.length !== people.length || props.data.some((p, idx) => p._id !== people[idx].id)) {\r\n      setPeople(props.data.map((o, i) => {return {id: o._id, name: o.name, selected: (people.length > i ? people[i].selected : false)}}))\r\n    }\r\n  }, [props.data, people.length, people])\r\n\r\n  const [join] = useMutation(JOIN);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <DialogTitle>Everyone at table {props.table}</DialogTitle>\r\n      <DialogContent>\r\n        <List>\r\n          {\r\n            people.map((p, i) =>\r\n              <ListItem key={p.id} onClick={() => handleJoin(i, people, setPeople)}>\r\n                <ListItemGraphic icon={p.selected ? \"radio_button_checked\" : \"radio_button_unchecked\"} />\r\n                <ListItemText>{p.name}</ListItemText>\r\n              </ListItem>\r\n            )\r\n          }\r\n        </List>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <DialogButton action=\"close\">Cancel</DialogButton >\r\n        <DialogButton action=\"accept\" onClick={joinOrders(join, people, props._id)} isDefaultAction>Join</DialogButton >\r\n      </DialogActions>\r\n    </React.Fragment>)\r\n}\r\n\r\nexport default JoinOrderSurface","import React from 'react'\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {\r\n  Dialog,\r\n  SimpleDialog\r\n} from '@rmwc/dialog';\r\n\r\nimport JoinDialogSurface from \"./JoinDialogSurface\"\r\n\r\nconst GET_ORDERS = \r\ngql`\r\n  query order($table: Int) {\r\n    orders(table: $table, hasPayed: false) {\r\n      _id,\r\n      name,\r\n    }\r\n  }`\r\n\r\nconst JoinOrder = (props) => {\r\n  const {loading, error, data = {orders: []}} = useQuery(GET_ORDERS, {variables: {table: props.table}, pollInterval: 500})\r\n  \r\n  if (!loading && !error)\r\n    return(\r\n    <Dialog\r\n        open={props.dialogOpen}\r\n        onClose={props.closeDialog}\r\n    >\r\n        <JoinDialogSurface data={data.orders.filter(o => o._id !== props._id)} {...props}/>\r\n    </Dialog>)\r\n  return (\r\n    <SimpleDialog\r\n      title={`Everyone at table ${props.table}`}\r\n      body={`Fetching Data. ${error ? error.message : ''}`}\r\n      open={props.dialogOpen}\r\n      onClose={props.closeDialog}\r\n    />\r\n  )\r\n}\r\n\r\nexport default JoinOrder","import React, {useState} from 'react'\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {Fab} from '@rmwc/fab';\r\nimport Masonry from 'react-masonry-component';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport OrderCard from '../components/orders/OrderCard'\r\nimport {observer, inject} from \"mobx-react\"\r\nimport {LinearProgress} from '@rmwc/linear-progress'\r\nimport JoinDialog from '../components/orders/JoinDialog'\r\nconst GET_ORDERS =\r\n  gql`query order($hasPayed: Boolean) {\r\n  orders(hasPayed: $hasPayed) {\r\n    _id,\r\n    name,\r\n    table,\r\n    notes,\r\n    dishes {\r\n      dish {\r\n        _id,\r\n        name,\r\n        cost,\r\n        type {\r\n          _id,\r\n          name\r\n        }\r\n      },\r\n      made,\r\n      delivered,\r\n      hasPayed,\r\n      extras {\r\n        _id, \r\n        name\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst getLoadingBar = (loading) => loading ? <LinearProgress /> : <></>;\r\n\r\nconst getFilteredOrders = (orders, filter, props, setJoinProps, setDialogState) => {\r\n\r\n  const matchesFilter = new RegExp(filter, \"i\")\r\n\r\n  return orders.filter(o =>\r\n    (!filter || (o.table.toString() === filter) || matchesFilter.test(o.name) || o.dishes.some(d => matchesFilter.test(d.dish.type.name)))\r\n    && (!props.store.kitchenMode || o.dishes.some(d => !d.made))\r\n  ).map((order, i) => (\r\n    <div\r\n      key={i}\r\n      style={{\r\n        width: '-webkit-fill-available',\r\n        maxWidth: '500px',\r\n        minWidth: '320px'\r\n      }}>\r\n      <OrderCard key={order._id} {...order} {...props} openJoinCard={(joinProps) => {\r\n        setJoinProps(joinProps)\r\n        setDialogState(true)\r\n      }}/>\r\n    </div>))\r\n}\r\n\r\nconst Order = inject(\"store\")(observer((props) => {\r\n  const filter = props.store.searchText\r\n\r\n  const [joinProps, setJoinProps] = useState({table: -1})\r\n  const [dialogOpen, setDialogState] = useState(false)\r\n\r\n  const {loading, error, data = {orders: []}} = useQuery(GET_ORDERS, {variables: {hasPayed: false}, pollInterval: 500})\r\n\r\n  if (error) {\r\n    console.warn(error)\r\n    return <><p>Error :(</p><span>{error.message}</span></>\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {getLoadingBar(loading)}\r\n      <Masonry id=\"masonry-layout\">\r\n        {getFilteredOrders(data.orders, filter, props, setJoinProps, setDialogState)}\r\n      </Masonry>\r\n      <JoinDialog dialogOpen={dialogOpen} closeDialog={() => {setDialogState(false)}} {...joinProps} />\r\n      <Link to=\"/orderDetails\">\r\n        <Fab className=\"floating-right\" icon=\"add\" />\r\n      </Link>\r\n      <div className=\"bottomSpacer\" />\r\n    </React.Fragment>\r\n  )\r\n}))\r\n\r\nexport default Order","import React, {useState, useEffect} from 'react'\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogButton\r\n} from '@rmwc/dialog'\r\nimport {List, SimpleListItem} from '@rmwc/list'\r\nimport {Chip, ChipSet} from '@rmwc/chip';\r\n\r\nconst onDelete = (setSelectedExtras, onDelete) => () => {\r\n  setSelectedExtras([])\r\n  onDelete()\r\n}\r\n\r\nconst onCancel = (setSelectedExtras, onClose) => () => {\r\n  setSelectedExtras([])\r\n  onClose()\r\n}\r\n\r\nconst onSave = (setSelectedExtras, selectedExtras, onSave) => () => {\r\n  onSave(selectedExtras.map(e => ({...e})))\r\n  setSelectedExtras([])\r\n}\r\n\r\nconst addExtra = (selectedExtras, setSelectedExtras, e) => () => {\r\n  setSelectedExtras([e].concat(selectedExtras))\r\n}\r\n\r\nconst DetailExtraDialog = (props) => {\r\n  const [selectedExtras, setSelectedExtras] = useState([])\r\n\r\n  useEffect(() => {\r\n    setSelectedExtras(props.selectedExtras || [])\r\n  }, [props.selectedExtras])\r\n\r\n  const {dish, extras} = props;\r\n  const anyExtras = extras && extras.length > 0\r\n  let title = anyExtras ? `Edit ${dish ? dish.name : \"dish\"} extras` : `Confirm ${dish ? dish.name : \"dish\"} Deletion`;\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.open}\r\n      onClose={props.onClose}\r\n    >\r\n      <DialogTitle>{title}</DialogTitle>\r\n\r\n      {anyExtras ?\r\n        < DialogContent >\r\n          <ChipSet>\r\n            {extras.sort((a, b) => a.name < b.name ? -1 : 1)\r\n              .map(e => <Chip key={e._id} label={e.name} onClick={addExtra(selectedExtras, setSelectedExtras, e)} />)}\r\n          </ChipSet>\r\n\r\n          <List>\r\n            {selectedExtras.map((s, id) =>\r\n              <SimpleListItem\r\n                key={id}\r\n                graphic=\"close\"\r\n                text={s.name}\r\n                onClick={() => setSelectedExtras(selectedExtras.filter((d, idx) => idx !== id))}\r\n              />)}\r\n          </List>\r\n        </DialogContent> :\r\n        <React.Fragment />}\r\n      <DialogActions>\r\n        <DialogButton\r\n          theme=\"secondary\"\r\n          action=\"close\"\r\n          onClick={onDelete(setSelectedExtras, props.onDelete)}>Delete</DialogButton>\r\n        <DialogButton\r\n          theme=\"primary\"\r\n          action=\"close\"\r\n          isDefaultAction\r\n          onClick={onCancel(setSelectedExtras, props.onClose)}>Cancel</DialogButton>\r\n        {\r\n          anyExtras ? < DialogButton\r\n            theme=\"primary\"\r\n            action=\"accept\"\r\n            onClick={onSave(setSelectedExtras, selectedExtras, props.onSave)} >Save</DialogButton> : <React.Fragment />}\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default DetailExtraDialog","import React, {useState} from 'react'\r\nimport {Grid, GridCell} from '@rmwc/grid';\r\nimport {TabBar, Tab} from '@rmwc/tabs';\r\nimport {\r\n  List,\r\n  SimpleListItem\r\n} from '@rmwc/list';\r\nimport {TextField} from '@rmwc/textfield';\r\nimport {Button} from '@rmwc/button';\r\nimport {gql} from 'apollo-boost';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n\r\nimport DetailExtraDialog from './DetailExtraDialog';\r\n\r\nimport './Details.css'\r\n\r\nconst ADD_ORDER = gql`\r\n  mutation addOrder($name: String, $table: Int!, $notes: String, $dishes: [orderDishMutation]!){\r\n    addOrder(table: $table, name: $name, dishes: $dishes, notes: $notes){\r\n      _id, \r\n      name,\r\n      table,\r\n      notes\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_ORDER = gql`\r\n  mutation updateOrder($id: ID!, $name: String, $table: Int, $notes: String, $dishes: [orderDishMutation]){\r\n    updateOrder(_id: $id, table: $table, name: $name, dishes: $dishes, notes: $notes ){\r\n      _id, \r\n      name,\r\n      table,\r\n      notes\r\n    }\r\n  }\r\n`;\r\n\r\nfunction addDish(id, name, typeName, dishes, setDishes) {\r\n  setDishes([{dish: {id, name, typeName}, made: false, hasPayed: false}].concat(dishes))\r\n}\r\n\r\nconst removeDish = (id, dishes, setDishes) => () => {\r\n  if (dishes.length < id) return\r\n  if (dishes[id].hasPayed || dishes[id].made) return\r\n\r\n  let newDishes = dishes.filter((_, idx) => idx !== id)\r\n  setDishes(newDishes)\r\n}\r\n\r\nfunction selectDish(id, dishes, setDialog, setSelectedDishId, setSelectableExtras, extras, allDishes) {\r\n\r\n  if (!dishes || dishes.length < id) return;\r\n  const dish = dishes[id].dish;\r\n\r\n  if (dish.hasPayed || dish.made) return;\r\n\r\n  var currentDish = allDishes.find(d => d._id === dish.id)\r\n  setDialog(true)\r\n  setSelectedDishId(id)\r\n  const selectableExtras = extras.filter(e => !currentDish.deselectedExtras.some(d => d._id === e._id) && e.type.name === currentDish.type.name)\r\n  setSelectableExtras(selectableExtras)\r\n}\r\n\r\nconst saveExtras = (dishes, selectedDishId, setDishes) => (extras) => {\r\n  dishes[selectedDishId].extras = extras\r\n  setDishes([...dishes])\r\n}\r\n\r\nfunction getDishTypes(dishes) {\r\n  return dishes.reduce((extras, c) => {\r\n    if (extras[c.type.name]) {\r\n      extras[c.type.name].push(c)\r\n    } else {\r\n      extras[c.type.name] = [c]\r\n    }\r\n    return extras\r\n  }, {})\r\n}\r\n\r\nfunction getDishesForType(dishTypes, keys, activeTabIndex, dishes, setDishes) {\r\n  return (dishTypes[keys[activeTabIndex]] || []).sort((a, b) => a.name < b.name ? -1 : 1).map((v, i) => {\r\n    var occur = dishes.reduce((c, d) => c + (d.dish.id === v._id ? 1 : 0), 0)\r\n    return (\r\n      <SimpleListItem\r\n        key={i}\r\n        onClick={_ => addDish(v._id, v.name, keys[activeTabIndex], dishes, setDishes)}\r\n        text={v.name}\r\n        graphic={occur ? \"check\" : \"none \"}\r\n        meta={occur ? occur : null} />)\r\n  })\r\n}\r\n\r\nconst DetailContent = (props) => {\r\n  const [name, setName] = useState(props.order ? props.order.name : \"\")\r\n  const [dialogState, setDialogState] = useState(false)\r\n  const [table, setTable] = useState(props.order ? props.order.table : 0)\r\n  const [notes, setNotes] = useState(props.order ? props.order.notes : \"\")\r\n  const [dishes, setDishes] = useState(props.order ? props.order.dishes.map(d => ({...d, dish: {id: d.dish._id, name: d.dish.name, typeName: d.dish.type.name}})) : [])\r\n  const [activeTabIndex, setActiveTabIndex] = useState(0)\r\n  const [dishTypes] = useState(getDishTypes(props.dishes))\r\n  const [keys] = useState(Object.keys(dishTypes).sort((a, b) => a < b ? -1 : 1))\r\n  const [selectedDishId, setSelectedDishId] = useState(-1)\r\n  const [selectableExtras, setSelectableExtras] = useState([])\r\n\r\n  const {id} = useParams()\r\n  const history = useHistory()\r\n\r\n  const [addOrUpdate, {data, loading, error}] = useMutation(id ? UPDATE_ORDER : ADD_ORDER);\r\n  let result = <Button onClick={() => addOrUpdate({\r\n    variables: {\r\n      id: id,\r\n      table: table ? parseInt(table) : 0,\r\n      name: name,\r\n      notes: notes,\r\n      dishes: dishes.map(d => {return {id: d.dish.id, made: d.made, hasPayed: d.hasPayed, delivered: d.delivered, extras: (d.extras || []).map(e => e._id)}}).filter(d => d && d.id)\r\n    }\r\n  })} theme=\"secondary\">Save</Button>\r\n  if (error) console.error(error);\r\n  if (data) history.goBack()\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid className=\"order-details\">\r\n        <GridCell span=\"12\">\r\n          {keys.length === 0 ? String() :\r\n            <TabBar\r\n              activeTabIndex={activeTabIndex}\r\n              onActivate={evt => setActiveTabIndex(evt.detail.index)}\r\n            >\r\n              {keys.map((v, i) => <Tab key={i}>{v}</Tab>)}\r\n            </TabBar>\r\n          }\r\n          <List>\r\n            {getDishesForType(dishTypes, keys, activeTabIndex, dishes, setDishes)}\r\n          </List>\r\n        </GridCell>\r\n      </Grid>\r\n      <Grid className=\"order-details\">\r\n        <GridCell span=\"6\">\r\n          <List className=\"extendSecondaryText\">\r\n            {dishes.map((v, i) =>\r\n              <SimpleListItem\r\n                onClick={() => {\r\n                  if (v.hasPayed || v.made || v.delivered) return;\r\n                  selectDish(i, dishes, setDialogState, setSelectedDishId, setSelectableExtras, props.extras, props.dishes)\r\n                }}\r\n                key={i}\r\n                text={v.dish.name}\r\n                secondaryText={(v.extras || []).map(e => e.name).join(\", \")}\r\n                graphic={v.hasPayed ? \"euro_symbol\" : v.delivered ? \"done_all\" : v.made ? \"done\" : \"remove\"}\r\n                ripple={false}\r\n                activated={false}\r\n                disabled={v.hasPayed || v.made || v.delivered}\r\n              />\r\n            )}\r\n          </List>\r\n        </GridCell>\r\n        <GridCell span=\"6\">\r\n          <TextField icon=\"event_seat\" label=\"Table\" type=\"number\" min=\"0\" inputMode=\"numeric\" pattern=\"\\d*\" value={table} onChange={(e) => setTable(e.target.value)} />\r\n          <TextField icon=\"account_circle\" label=\"Name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n          <TextField textarea fullwidth label=\"Notes\" type=\"number\" value={notes} onChange={(e) => setNotes(e.target.value)} />\r\n        </GridCell>\r\n      </Grid>\r\n      {loading ? <LinearProgress /> : <></>}\r\n      {error ? <span>{error.message}</span> : <></>}\r\n      {result}\r\n      <DetailExtraDialog\r\n        open={dialogState}\r\n        onClose={() => setDialogState(false)}\r\n        dish={dishes[selectedDishId] ? dishes[selectedDishId].dish : undefined}\r\n        onDelete={removeDish(selectedDishId, dishes, setDishes)}\r\n        onSave={saveExtras(dishes, selectedDishId, setDishes)}\r\n        extras={selectableExtras}\r\n        selectedExtras={dishes[selectedDishId] ? dishes[selectedDishId].extras || [] : []}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default DetailContent","import React from 'react'\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\n\r\nimport { Elevation } from '@rmwc/elevation';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle,\r\n  ToolbarIcon\r\n} from '@rmwc/toolbar';\r\nimport { LinearProgress } from '@rmwc/linear-progress';\r\n\r\nimport DetailContent from \"../components/order-details/DetailContent\"\r\n\r\nconst GET_ORDER = gql`\r\n  query order($id: ID) {\r\n    orders(_id: $id) {\r\n      _id,\r\n      name,\r\n      table,\r\n      notes,\r\n      dishes {\r\n        dish {\r\n          _id,\r\n          name,\r\n          type {\r\n            _id,\r\n            name\r\n          }\r\n        }, \r\n        made,\r\n        hasPayed,\r\n        delivered,\r\n        extras {\r\n          _id,\r\n          name,\r\n          type {\r\n            _id, \r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\nconst GET_DISHES = gql`\r\n  {\r\n    dishes {\r\n      _id,\r\n      name,\r\n      type {\r\n        _id,\r\n        name\r\n      }, \r\n      deselectedExtras {\r\n        _id\r\n      }\r\n    },\r\n    dishExtras {\r\n      _id,\r\n      name,\r\n      type {\r\n        _id,\r\n        name\r\n      }\r\n    }\r\n  }`\r\n\r\nconst getDetailContent = ({loading, error, data = {orders: []}, dishes, extras, id}) => { \r\n  if (error) console.error(error)\r\n  return (\r\n    loading ? <LinearProgress /> :\r\n    error ? <><p>Error :( </p><span>{error.message}</span></> \r\n      : <DetailContent order={data.orders.length === 1 ? data.orders[0] : null } dishes={dishes} extras={extras} id={id}/>)\r\n}\r\n\r\nconst OrderDetails = (props) => {\r\n  const {id} = useParams()\r\n  const history = useHistory()\r\n\r\n  const {loading, error, data} = useQuery(GET_DISHES)\r\n  const orderResult = useQuery(GET_ORDER, {variables: {id}})\r\n\r\n  let result = \r\n    loading ? <LinearProgress /> : \r\n    error ? <><p>Error :( </p><span>{error.message}</span></> \r\n      : getDetailContent({...orderResult, id, dishes: data.dishes, extras: data.dishExtras})\r\n  return (\r\n    <Elevation className=\"main-elevation\" z={24}>\r\n      <Toolbar>\r\n        <ToolbarRow>\r\n          <ToolbarSection alignStart>\r\n            <ToolbarTitle>Order Details</ToolbarTitle>\r\n          </ToolbarSection>\r\n          <ToolbarSection alignEnd>\r\n            <ToolbarIcon icon=\"clear\" onClick={history.goBack}/>\r\n          </ToolbarSection>\r\n        </ToolbarRow>\r\n      </Toolbar>\r\n      {result}\r\n    </Elevation>\r\n    )\r\n}\r\n\r\nexport default OrderDetails","import React from \"react\"\r\nimport {Query} from \"react-apollo\";\r\nimport {gql} from 'apollo-boost';\r\n\r\nfunction CreateReceipt(dishes, id) {\r\n  const totalCosts = dishes.reduce((a, c) => a + (c.extras || []).reduce((f, e) => f + e.cost, 0) + c.dish.cost, 0).toFixed(2)\r\n\r\n  return (\r\n    <Query\r\n      query={gql`{ company {\r\n                    name,\r\n                    street, \r\n                    postalCode,\r\n                    city, \r\n                    website,\r\n                    taxId\r\n                  }\r\n                }`}>\r\n      {({loading, error, data}) => {\r\n        if (!loading && !error && data){\r\n          const {name, street, postalCode, city, website, taxId} = data.company\r\n          const dateTime = new Date().toLocaleString(\"de\").split(',')\r\n          return (<div className=\"receipt\">\r\n            <div className=\"header\">\r\n              <h2>{name}</h2>\r\n              <p>{street}</p>\r\n              <p>{postalCode} {city}</p>\r\n              <p>{website}</p>\r\n              <p>{taxId}</p>\r\n            </div>\r\n            <table className=\"receipt\" align=\"center\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    Datum: {dateTime[0]}\r\n                  </td>\r\n                  <td>\r\n                    Zeit: {dateTime[1]}\r\n                  </td>\r\n                </tr>\r\n                <tr >\r\n                  <td className=\"bill-split\"></td>\r\n                  <td className=\"bill-split\"></td>\r\n                </tr>\r\n                <tr>\r\n                  <th></th>\r\n                  <th>EUR</th>\r\n                </tr>\r\n                {dishes.map((d, idx) =>\r\n                  <tr key={idx}>\r\n                    <td>{d.dish.name}</td>\r\n                    <td>{(d.dish.cost + (d.extras || []).reduce((a, e) => a + e.cost, 0)).toFixed(2)}</td>\r\n                  </tr>\r\n                )}\r\n                <tr>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n                <tr>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n                <tr >\r\n                  <td className=\"bill-split\"></td>\r\n                  <td className=\"bill-split\"></td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"bill-payment\">ANZAHL DER ARTIKEL {dishes.length}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>davon MwSt. (19%)</td>\r\n                  <td>{(totalCosts - (totalCosts / 1.19)).toFixed(2)}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td className=\"bill-payment\"><h5>TOTAL</h5></td>\r\n                  <td className=\"bill-payment\">{totalCosts}</td>\r\n                </tr>\r\n                \r\n              </tbody>\r\n            </table >\r\n            <table className=\"receipt\" align=\"center\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    Bon: {id}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div >)}\r\n        return (<React.Fragment/>)\r\n\r\n      }}\r\n    </Query>\r\n  )\r\n}\r\n\r\nexport default CreateReceipt;","import React, {useState, useEffect} from 'react'\r\nimport {TextField} from '@rmwc/textfield';\r\nimport {Button, ButtonIcon} from '@rmwc/button';\r\nimport {gql} from 'apollo-boost';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {Grid, GridCell} from '@rmwc/grid';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemGraphic,\r\n  ListItemMeta,\r\n  ListDivider,\r\n  ListItemSecondaryText,\r\n  ListItemPrimaryText\r\n} from '@rmwc/list';\r\nimport {useHistory} from 'react-router-dom';\r\nimport CreateReceipt from './CreateReciept';\r\n\r\nconst PAY = gql`\r\n  mutation pay($id: ID!, $dishes: [orderDishMutation]!, $amountPayed: Float!){\r\n    updateOrder(_id: $id, dishes: $dishes, amountPayed: $amountPayed){\r\n      _id,\r\n      dishes {\r\n        hasPayed\r\n      }\r\n    }\r\n  }`\r\n\r\nfunction toggleSelection(i, dishes, setDishes, setSelectAll) {\r\n  return () => {\r\n    const newDishes = dishes.map((d, idx) => idx === i ? {...d, paying: !d.paying} : d)\r\n    setDishes(newDishes)\r\n    setSelectAll(newDishes.every(d => d.paying))\r\n  }\r\n}\r\n\r\nfunction toggleAll(dishes, setDishes, selectAll, setSelectAll) {\r\n  return () => {\r\n    setDishes(dishes.map(d => ({...d, paying: !d.paying})))\r\n    setSelectAll(selectAll)\r\n  }\r\n}\r\n\r\nfunction changePayment(setPaying) {\r\n  return (e) => {\r\n    if (!isNaN(e.target.value))\r\n      setPaying(!e.target.value ? \"\" : parseFloat(e.target.value))\r\n  }\r\n}\r\n\r\nconst PayOrderContent = (props) => {\r\n\r\n  const [dishes, setDishes] = useState(props.dishesToPay)\r\n  const [paying, setPaying] = useState(0)\r\n  const [selectAll, setSelectAll] = useState(true)\r\n  const [pay, {data, loading, error}] = useMutation(PAY)\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    if (props.dishesToPay.length === 0) return\r\n    if (props.dishesToPay.length === dishes.length && props.dishesToPay.every((d, idx) => d._id === dishes[idx]._id)) return\r\n\r\n    setDishes(props.dishesToPay.map(m => ({\r\n      ...m,\r\n      paying: false\r\n    })))\r\n  }, [props.dishesToPay, props.dishesToPay.length, dishes.length, dishes])\r\n  const {id} = props\r\n\r\n  let total = 0\r\n\r\n  let result = <Button onClick={() => {\r\n    pay({\r\n      variables: {\r\n        id: props.id,\r\n        dishes: dishes.map(d => {\r\n          return {\r\n            id: d.dish._id,\r\n            made: d.made,\r\n            hasPayed: d.paying,\r\n            delivered: d.delivered,\r\n            extras: d.extras.map(e => e._id)\r\n          }\r\n        }).concat(props.payedDishes.map(d => {\r\n          return {\r\n            id: d.dish._id,\r\n            made: d.made,\r\n            hasPayed: d.hasPayed,\r\n            delivered: d.delivered,\r\n            extras: d.extras.map(e => e._id)\r\n          }\r\n        })),\r\n        amountPayed: paying\r\n      }\r\n    })\r\n  }\r\n  } disabled={!paying} > Pay </Button>\r\n\r\n  if (loading)\r\n    result =\r\n      <React.Fragment>\r\n        <LinearProgress />\r\n        {result}\r\n      </React.Fragment>\r\n  if (error) {\r\n    console.error(error);\r\n  }\r\n  if (data && data.updateOrder && data.updateOrder.dishes.reduce((a, c) => a && c.hasPayed, true)) {\r\n    history.goBack()\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <List className=\"no-print\">\r\n        <ListItem key={-1} onClick={toggleAll(dishes, setDishes, selectAll, setSelectAll)}>\r\n          <ListItemGraphic icon={selectAll ? \"radio_button_checked\" : \"radio_button_unchecked\"} />\r\n          <ListItemText>Everything</ListItemText>\r\n        </ListItem>\r\n\r\n        <ListDivider />\r\n        {dishes.map((v, i) => {\r\n          const extraCost = v.extras.reduce((a, e) => a + e.cost, 0);\r\n          if (v.paying)\r\n            total = v.dish.cost + total + extraCost\r\n\r\n          return (\r\n            <ListItem key={i} onClick={toggleSelection(i, dishes, setDishes, setSelectAll)}>\r\n              <ListItemGraphic icon={v.paying ? \"radio_button_checked\" : \"radio_button_unchecked\"} />\r\n              <ListItemText>\r\n                <ListItemPrimaryText>{v.dish.name}</ListItemPrimaryText>\r\n                <ListItemSecondaryText>{v.extras.map(e => e.name).join(\", \")}</ListItemSecondaryText>\r\n              </ListItemText>\r\n              <ListItemMeta tag=\"span\" basename=\"\">{(v.dish.cost + extraCost).toFixed(2)}</ListItemMeta>\r\n            </ListItem>)\r\n        })}\r\n      </List>\r\n      < Grid className=\"no-print\">\r\n        <GridCell span=\"12\">\r\n          <TextField icon=\"euro_symbol\" disabled label=\"Total\" value={total.toFixed(2)} />\r\n          <TextField icon=\"euro_symbol\" label=\"Difference\" value={(paying - total).toFixed(2)} onChange={() => {}} invalid={paying - total < 0} />\r\n          <TextField icon=\"euro_symbol\" label=\"Paying\" type=\"number\" inputMode=\"numeric\" pattern=\"\\d*.*,*\\d*\" value={paying} invalid={!paying} onChange={changePayment(setPaying)} />\r\n        </GridCell>\r\n      </Grid>\r\n      <div className=\"no-print\">\r\n        {result}\r\n        <Button theme=\"secondary\" onClick={window.print}><ButtonIcon icon=\"receipt\" />Print</Button>\r\n      </div>\r\n      <div className=\"print\">{CreateReceipt(dishes.filter(d => d.paying), id)}</div>\r\n    </React.Fragment>)\r\n}\r\n\r\nexport default PayOrderContent","import React from 'react';\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {useHistory, useParams} from 'react-router-dom';\r\nimport {gql} from 'apollo-boost';\r\nimport {Elevation} from '@rmwc/elevation';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle,\r\n  ToolbarIcon\r\n} from '@rmwc/toolbar';\r\nimport PayOrderContent from \"../components/orders/PayOrderContent\"\r\n\r\nconst GET_ORDER = gql`\r\n  query order($id: ID) {\r\n    orders(_id: $id) {\r\n      _id,\r\n      name,\r\n      table,\r\n      dishes {\r\n        dish {\r\n          _id,\r\n          name,\r\n          cost\r\n        },\r\n        hasPayed,\r\n        made,\r\n        delivered,\r\n        extras {\r\n          _id,\r\n          cost,\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }`\r\n\r\nconst getOrderDetails = (id, loading, error, data) => {\r\n  if (loading) return <LinearProgress />;\r\n  if (error) return <><p>Error :(</p><span>{error.message}</span></>;\r\n\r\n  if (data.orders.length !== 1) return String()\r\n  return <PayOrderContent\r\n    id={id}\r\n    payedDishes={data.orders[0].dishes.filter(d => d.hasPayed)}\r\n    dishesToPay={data.orders[0].dishes.filter(d => !d.hasPayed)\r\n      .map(d => {\r\n        return {\r\n          dish: d.dish,\r\n          made: d.made,\r\n          paying: true,\r\n          delivered: d.delivered,\r\n          extras: d.extras\r\n        }\r\n      })}\r\n  />\r\n}\r\n\r\nconst PayOrder = () => {\r\n  const {id} = useParams()\r\n  const {loading, error, data = {orders: []}} = useQuery(GET_ORDER, {variables: {id}, pollInterval: 1000})\r\n  const history = useHistory()\r\n  const name = data.orders[0] && data.orders[0].name ? `${data.orders[0].name}'s` : ''\r\n  return (\r\n    <Elevation className=\"main-elevation\" z={24}>\r\n      <Toolbar className=\"no-print\">\r\n        <ToolbarRow>\r\n          <ToolbarSection alignStart>\r\n            <ToolbarTitle>Pay {name} order</ToolbarTitle>\r\n          </ToolbarSection>\r\n          <ToolbarSection alignEnd>\r\n            <ToolbarIcon icon=\"clear\" onClick={() => history.goBack()} />\r\n          </ToolbarSection>\r\n        </ToolbarRow>\r\n      </Toolbar>\r\n      {getOrderDetails(id, loading, error, data)}          \r\n    </Elevation>\r\n  )\r\n} \r\n\r\nexport default PayOrder","import React from 'react';\r\nimport {Elevation} from '@rmwc/elevation';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle\r\n} from '@rmwc/toolbar';\r\nimport {\r\n  List\r\n} from '@rmwc/list';\r\n\r\nimport {SimpleListItem} from '@rmwc/list';\r\n\r\nconst DishCard = (props) => {\r\n  const {setDevice, setIsDialogOpen} = props\r\n  return (\r\n    <Elevation className=\"main-elevation\" z={24} style={{margin: \"1rem\"}}>\r\n      <Toolbar>\r\n        <ToolbarRow>\r\n          <ToolbarSection alignStart>\r\n            <ToolbarTitle>{props.typeName}</ToolbarTitle>\r\n          </ToolbarSection>\r\n        </ToolbarRow>\r\n      </Toolbar>\r\n      <List twoLine>\r\n        {props.dishes.map(d =>\r\n          <SimpleListItem key={d._id} onClick={() => {setDevice(d); setIsDialogOpen(true)}} text={d.name} secondaryText={`€ ${d.cost.toFixed(2)}`} metaIcon=\"edit\" />\r\n        )}\r\n      </List>\r\n    </Elevation>\r\n  )\r\n}\r\nexport default DishCard","import React, {useState, useEffect} from 'react'\r\nimport {useQuery, useMutation} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogButton\r\n} from '@rmwc/dialog'\r\nimport {Chip, ChipSet} from '@rmwc/chip';\r\nimport {TextField} from '@rmwc/textfield';\r\nimport {Select} from '@rmwc/select';\r\n\r\nconst ADD = gql` mutation add($name: String!, $cost: Float!, $type: ID!, $deselectedExtras: [ID]){\r\n addDish(name: $name, cost: $cost, type: $type, deselectedExtras: $deselectedExtras){\r\n   _id, \r\n   name\r\n }\r\n}`\r\nconst UPDATE = gql`mutation update($id: ID!, $name: String, $cost: Float, $type: ID, $deselectedExtras: [ID]){\r\n updateDish(_id: $id, name: $name, cost: $cost, type: $type, deselectedExtras: $deselectedExtras){\r\n   _id, \r\n   name\r\n }\r\n}`\r\nconst REMOVE = gql`mutation remove($id: ID!){\r\n removeDish(_id: $id, ){\r\n   _id, \r\n   name\r\n }\r\n}`\r\n\r\nconst GET_DISH_EXTRAS = gql`\r\nquery dishExtras($typeId: ID) {\r\n  dishExtras(type: $typeId) {\r\n    _id,\r\n    name\r\n  }\r\n}`\r\n\r\nconst handleDeselectedExtraChange = (deselectedExtras, setDeselectedExtras) => (e) => {\r\n  const id = deselectedExtras.indexOf(e.target.chipId)\r\n  if (id > -1) {\r\n    setDeselectedExtras(deselectedExtras.filter((_, idx) => idx !== id))\r\n  } else {\r\n    setDeselectedExtras([...deselectedExtras, e.target.chipId])\r\n  }\r\n}\r\n\r\nconst DishDialog = (props) => {\r\n  const [name, setName] = useState(props.name || '')\r\n  const [cost, setCost] = useState(props.cost || 0)\r\n  const [type, setType] = useState(props.type ? props.type._id : '')\r\n  const [deselectedExtras, setDeselectedExtras] = useState((props.deselectedExtras || []).map(de => de._id))\r\n\r\n  useEffect(() => {\r\n    setName(props.name || '')\r\n    setCost(props.cost || 0)\r\n    setType(props.type ? props.type._id : '')\r\n    setDeselectedExtras((props.deselectedExtras || []).map(de => de._id))\r\n  }, [props.name, props.cost, props.type, props.deselectedExtras])\r\n\r\n  const [remove] = useMutation(REMOVE)\r\n  const [addOrUpdate] = useMutation(props._id ? UPDATE : ADD)\r\n  const {data = {dishExtras: []}} = useQuery(GET_DISH_EXTRAS, {variables: {typeId: type || null}})\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.open}\r\n      onClose={props.onClose}\r\n    >\r\n      <DialogTitle>{props._id ? `Edit ${props.name}` : \"New dish\"}</DialogTitle>\r\n      <DialogContent>\r\n        <TextField type=\"text\" label=\"Name\" value={name} onChange={(e) => setName(e.target.value || '')} />\r\n        <TextField \r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          label=\"Cost\"\r\n          invalid={false}\r\n          value={cost} \r\n          onChange={(e) => setCost(e.target.value)} />\r\n        <Select\r\n          value={type}\r\n          onChange={(e) => setType(e.target.value)}\r\n          placeholder=\"\"\r\n          label=\"Dish type\"\r\n          options={props.dishTypes}\r\n        />\r\n        <ChipSet>\r\n          {(data.dishExtras).map(e => \r\n            <Chip \r\n              key={e._id} \r\n              label={e.name} \r\n              checkmark \r\n              selected={!deselectedExtras.some(de => de === e._id)} \r\n              onInteraction={handleDeselectedExtraChange(deselectedExtras, setDeselectedExtras)} />)\r\n          }\r\n        </ChipSet>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <DialogButton theme=\"secondary\" action=\"close\" isDefaultAction>\r\n          Cancel\r\n        </DialogButton>\r\n        <DialogButton action=\"accept\" onClick={() => remove({variables: {id: props._id}})} disabled={!props._id}>\r\n          Delete\r\n        </DialogButton >\r\n        <DialogButton action=\"accept\" onClick={() => {\r\n          const floatCost = parseFloat(cost)\r\n          addOrUpdate({variables: {\r\n              id: props._id, \r\n              name: name, \r\n              type: type,\r\n              cost: floatCost,\r\n              deselectedExtras: deselectedExtras\r\n            }})\r\n        }}>\r\n          Save\r\n        </DialogButton>\r\n      </DialogActions>\r\n    </Dialog>)\r\n}\r\n\r\nexport default DishDialog","import React, {useState} from 'react';\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport Masonry from 'react-masonry-component';\r\nimport {Fab} from '@rmwc/fab';\r\n\r\nimport DishCard from '../components/dishes/DishCard';\r\nimport DishDialog from '../components/dishes/DishDialog';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {observer, inject} from \"mobx-react\";\r\n\r\nconst GET_DISH_TYPES = gql`\r\n  query dishTypes {\r\n    dishTypes {\r\n      _id,\r\n      name\r\n    }\r\n  }`\r\n\r\nconst GET_DISHES = gql`\r\n  query dishes {\r\n    dishes {\r\n      _id,\r\n      name,\r\n      cost,\r\n      type {\r\n        _id,\r\n        name\r\n      }, \r\n      deselectedExtras {\r\n        _id\r\n      }\r\n    }\r\n  }`\r\n\r\nconst groupBy = (xs, func) => (\r\n  xs.reduce(function (rv, x) {\r\n    (rv[func(x)] = rv[func(x)] || []).push(x);\r\n    return rv;\r\n  }, {})\r\n)\r\n\r\nconst Dishes = (props) => {\r\n  const [device, setDevice] = useState({})\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\r\n  const filter = props.store.searchText\r\n  const matchesFilter = new RegExp(filter, \"i\")\r\n\r\n  const dishTypesResult = useQuery(GET_DISH_TYPES, {pollInterval: 10000})\r\n  let dishTypes = []\r\n  if (dishTypesResult.data && dishTypesResult.data.dishTypes)\r\n    dishTypes = dishTypesResult.data.dishTypes.map(d => {return {label: d.name, value: d._id}})\r\n\r\n  const {loading, error, data = {dishes: []}} = useQuery(GET_DISHES, {pollInterval: 1000})\r\n\r\n  const grouped = groupBy(data.dishes.filter(o => {\r\n    return (!filter || matchesFilter.test(o.name) || matchesFilter.test(o.type.name))\r\n  }), d => d.type.name)\r\n\r\n  const groupedDishes = []\r\n  for (const group in grouped) {\r\n    groupedDishes.push(<div\r\n      key={grouped[group][0]._id}\r\n      style={{\r\n        width: '-webkit-fill-available',\r\n        maxWidth: '500px',\r\n        minWidth: '320px'\r\n      }}>\r\n      <DishCard typeName={group} dishes={grouped[group]} dishTypes={dishTypes} setDevice={setDevice} setIsDialogOpen={setIsDialogOpen} />\r\n    </div>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loading ? <LinearProgress /> : <></>}\r\n      {error ? <><p>Error :(</p><span>{error.message}</span></> : <></>}\r\n      <React.Fragment>\r\n        <Masonry id=\"masonry-layout\">\r\n          {groupedDishes}\r\n        </Masonry>\r\n        <Fab className=\"floating-right\" icon=\"add\" onClick={() => {setDevice({}); setIsDialogOpen(true)}} />\r\n      </React.Fragment>\r\n      <DishDialog {...device} dishTypes={dishTypes} open={isDialogOpen} onClose={() => {setDevice({}); setIsDialogOpen(false)}} />\r\n      <div className=\"bottomSpacer\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default inject(\"store\")(observer(Dishes))","import React from 'react'\r\nimport { observer, inject } from \"mobx-react\"\r\nimport {\r\n  List,\r\n  ListItem, \r\n  ListItemGraphic,\r\n  ListItemText\r\n} from '@rmwc/list';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle\r\n} from '@rmwc/toolbar';\r\n\r\nconst GlobalSettings = (props) => \r\n(\r\n  <React.Fragment>\r\n    <Toolbar>\r\n      <ToolbarRow>\r\n        <ToolbarSection alignStart>\r\n          <ToolbarTitle>Global Settings</ToolbarTitle>\r\n        </ToolbarSection>\r\n      </ToolbarRow>\r\n    </Toolbar>\r\n    <List>\r\n      <ListItem onClick={() => props.store.setKitchenMode(!props.store.kitchenMode)}>\r\n        <ListItemGraphic icon={ props.store.kitchenMode ? \"radio_button_checked\" : \"radio_button_unchecked\"}/>\r\n        <ListItemText>Kitchen Mode</ListItemText>\r\n      </ListItem>\r\n    </List>\r\n    </React.Fragment>\r\n)\r\n\r\nexport default inject(\"store\")(observer(GlobalSettings))","import React, {useState, useEffect} from 'react'\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogButton\r\n} from '@rmwc/dialog';\r\nimport {TextField} from '@rmwc/textfield';\r\n\r\nconst ADD = gql` mutation add($name: String!){\r\n addDishType(name: $name){\r\n   _id, \r\n   name\r\n }\r\n}`\r\nconst UPDATE = gql`mutation update($id: ID!, $name: String!){\r\n updateDishType(_id: $id, name: $name){\r\n   _id, \r\n   name\r\n }\r\n}`\r\nconst REMOVE = gql`mutation remove($id: ID!){\r\n removeDishType(_id: $id, ){\r\n   _id, \r\n   name\r\n }\r\n}`\r\n\r\nconst DishTypeDialog = (props) => {\r\n  const [name, setName] = useState(props.name || '')\r\n  const {isDialogOpen, setIsDialogOpen} = props\r\n\r\n  useEffect(() => {\r\n    setName(props.name || '')\r\n  }, [props.name])\r\n\r\n  const isNewDishType = !props._id\r\n  const [remove] = useMutation(REMOVE)\r\n  const [addOrUpdate] = useMutation(isNewDishType ? ADD : UPDATE)\r\n\r\n  return (\r\n    <Dialog\r\n      open={isDialogOpen}\r\n      onClose={() => setIsDialogOpen(false)}\r\n    >\r\n      <DialogTitle>{isNewDishType ? \"Edit dish type\" : \"New dish type\"}</DialogTitle>\r\n      <DialogContent>\r\n        <TextField type=\"text\" label=\"Name\" value={name} onChange={(e) => setName(e.target.value || '')} />\r\n      </DialogContent>\r\n      <DialogActions >\r\n        <DialogButton theme=\"secondary\" action=\"cancel\" isDefaultAction >\r\n          Cancel\r\n          </DialogButton>\r\n        <DialogButton action=\"accept\" onClick={() => remove({variables: {id: props._id}})} disabled={isNewDishType} >\r\n          Delete\r\n          </DialogButton>\r\n        <DialogButton action=\"accept\" onClick={() => addOrUpdate({variables: {id: props._id, name: name}})}>\r\n          Save\r\n          </DialogButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default DishTypeDialog","import React, {useState} from 'react'\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle,\r\n  ToolbarIcon\r\n} from '@rmwc/toolbar';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemMeta\r\n} from '@rmwc/list';\r\nimport DishTypeDialog from './DishTypeDialog';\r\n\r\nconst GET_DISH_TYPES = gql`\r\nquery dishTypes {\r\n  dishTypes {\r\n    _id,\r\n    name\r\n  }\r\n}`\r\n\r\nconst DishTypes = (props) => {\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false)\r\n  const [dialogContent, setDialogContent] = useState({_id: null})\r\n\r\n  const {loading, error, data = {dishTypes: []}} = useQuery(GET_DISH_TYPES, {pollInterval: 1000})\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar>\r\n        <ToolbarRow>\r\n          <ToolbarSection alignStart>\r\n            <ToolbarTitle>Dish types</ToolbarTitle>\r\n          </ToolbarSection>\r\n          <ToolbarSection alignEnd>\r\n            <ToolbarIcon icon=\"add\" onClick={() => {setDialogContent({_id: null});setIsDialogOpen(!isDialogOpen)}} />\r\n          </ToolbarSection>\r\n        </ToolbarRow>\r\n      </Toolbar>\r\n      {loading ? <LinearProgress /> : <></>}\r\n      {error ? <><p>Error :(</p><span>{error.message}</span></> : <></>}\r\n      <List>{\r\n        data.dishTypes.map(d =>\r\n          <ListItem key={d._id} onClick={() => {setDialogContent(d); setIsDialogOpen(!isDialogOpen); }}>\r\n            <ListItemText>{d.name}</ListItemText>\r\n            <ListItemMeta icon=\"edit\" />\r\n          </ListItem>\r\n        )}\r\n      </List>\r\n      <DishTypeDialog isDialogOpen={isDialogOpen} setIsDialogOpen={setIsDialogOpen} {...dialogContent} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default DishTypes","import React from 'react'\r\n\r\nimport { Elevation } from '@rmwc/elevation';\r\nimport { Grid, GridCell } from '@rmwc/grid';\r\n\r\nimport GlobalSettings from '../components/settings/GlobalSettings'\r\nimport DishTypes from '../components/settings/DishTypes'\r\n\r\nconst Settings = () => \r\n(\r\n  <Grid>\r\n    <GridCell span=\"12\">\r\n      <Elevation className=\"main-elevation\" z={24}>\r\n        <GlobalSettings />\r\n\r\n      </Elevation>\r\n    </GridCell>\r\n    <GridCell span=\"12\">\r\n      <Elevation className=\"main-elevation\" z={24}>\r\n        <DishTypes />\r\n      </Elevation>\r\n    </GridCell>\r\n  </Grid>\r\n)\r\n\r\nexport default Settings\r\n","import React, {useState} from 'react'\r\nimport {gql} from 'apollo-boost';\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {Elevation} from '@rmwc/elevation';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle,\r\n  ToolbarIcon\r\n} from '@rmwc/toolbar';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryText,\r\n  ListItemMeta,\r\n  ListDivider\r\n} from '@rmwc/list';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {Menu, MenuItem, MenuSurfaceAnchor} from '@rmwc/menu';\r\nimport FileSaver from \"filesaver.js-npm\"\r\nimport Pagination from '@material-ui/core/TablePagination'\r\n\r\nfunction getMonday(d) {\r\n  d = new Date(d);\r\n  let day = d.getDay();\r\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(d.setDate(diff));\r\n}\r\n\r\nfunction downloadData(data, orders, minOrderTimestamp) {\r\n  const blob = new Blob(\r\n    [\"\\uFEFFid,timestamp,name,type,cost\\n\",\r\n      ...data.map(o => `${o.id},${o.timestamp.toISOString()},${o.name},${o.type},${o.cost}\\n`)], {encoding: \"UTF-8\", type: \"text/csv;charset=UTF-8\"})\r\n  FileSaver.saveAs(blob, `Dishes sold ${minOrderTimestamp.toISOString()}-${new Date().toISOString()}.csv`, true)\r\n  const orderBlob = new Blob(\r\n    [\"\\uFEFFid, timestamp, totalPayed\\n\",\r\n      ...orders.map(o => `${o._id},${new Date(o.timestamp).toISOString()},${(o.amountPayed || 0).toFixed(2)}\\n`)], {encoding: \"UTF-8\", type: \"text/csv;charset=UTF-8\"})\r\n  FileSaver.saveAs(orderBlob, `Orders sold ${minOrderTimestamp.toISOString()} -${new Date().toISOString()}.csv`, true)\r\n}\r\n\r\nconst setHistoryFilter = (setMinOrderTimestamp, setHeader) => evt => {\r\n  let tmsp = new Date(\"0\");\r\n  let title = \"History\"\r\n\r\n  if (evt.detail.index === 1) {\r\n    tmsp = getMonday(new Date(new Date().toDateString()))\r\n    title = \"This weeks History\"\r\n  } else if (evt.detail.index === 2) {\r\n    tmsp = new Date(new Date().toDateString())\r\n    title = \"Todays History\"\r\n  }\r\n\r\n  setMinOrderTimestamp(tmsp)\r\n  setHeader(title)\r\n}\r\n\r\nconst ORDERS = gql`\r\n{\r\n  orders(hasPayed: true) {\r\n    _id,\r\n    timestamp,\r\n    amountPayed,\r\n    dishes {\r\n      dish {\r\n        name,\r\n        cost,\r\n        type{\r\n          name\r\n        } \r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst History = () => {\r\n  const [menuIsOpen, setMenuIsOpen] = useState(false)\r\n  const [minOrderTimestamp, setMinOrderTimestamp] = useState(new Date(new Date().toDateString()))\r\n  const [header, setHeader] = useState(\"Todays History\")\r\n  const [page, setPage] = useState(0)\r\n  const [itemsPerPage] = useState(10)\r\n\r\n  const {loading, error, data} = useQuery(ORDERS)\r\n\r\n  let ordered = []\r\n  let total = 0\r\n  let totalWithTips = 0\r\n  let ordersInRange = []\r\n\r\n  if (data && data.orders)\r\n    ordersInRange = data.orders.filter(o => new Date(parseInt(o.timestamp)) >= minOrderTimestamp)\r\n\r\n  ordersInRange.forEach(o => {\r\n    o.dishes.forEach(d => {\r\n      ordered.push({\r\n        timestamp: new Date(parseInt(o.timestamp)),\r\n        name: d.dish.name,\r\n        cost: d.dish.cost.toFixed(2),\r\n        type: d.dish.type.name,\r\n        id: o._id\r\n      })\r\n      total = total + d.dish.cost\r\n    })\r\n    totalWithTips = totalWithTips + o.amountPayed || 0\r\n  })\r\n\r\n\r\n  return (\r\n    <Elevation className=\"main-elevation\" z={24}>\r\n      <Toolbar>\r\n        <ToolbarRow>\r\n          <ToolbarSection alignStart>\r\n            <ToolbarTitle>{header}</ToolbarTitle>\r\n          </ToolbarSection>\r\n          <ToolbarSection alignEnd>\r\n            <MenuSurfaceAnchor>\r\n              <Menu\r\n                open={menuIsOpen}\r\n                onSelect={setHistoryFilter(setMinOrderTimestamp, setHeader)}\r\n                onClose={_ => setMenuIsOpen(false)}\r\n              >\r\n                <MenuItem>Everything</MenuItem>\r\n                <MenuItem>This Week</MenuItem>\r\n                <MenuItem>Today</MenuItem>\r\n              </Menu>\r\n\r\n              <ToolbarIcon icon=\"filter_list\"\r\n                onClick={_ => setMenuIsOpen(!menuIsOpen)}\r\n              />\r\n            </MenuSurfaceAnchor>\r\n            <ToolbarIcon icon=\"cloud_download\" onClick={() => downloadData(ordered, ordersInRange, minOrderTimestamp)} />\r\n          </ToolbarSection>\r\n        </ToolbarRow>\r\n      </Toolbar>\r\n      <List>{\r\n        ordered.slice(page * itemsPerPage, page * itemsPerPage + itemsPerPage).map((o, i) =>\r\n          <ListItem key={i} >\r\n            <ListItemText>{o.name}\r\n              <ListItemSecondaryText> {o.timestamp.toDateString()} </ListItemSecondaryText>\r\n            </ListItemText>\r\n            <ListItemMeta tag=\"span\" basename=\"\" >{`€ ${o.cost}`}</ListItemMeta>\r\n          </ListItem>\r\n        )}\r\n\r\n        {\r\n          !loading && !error && ordered.length === 0 ? \r\n          <ListItem >\r\n            <ListItemText> Nothing was found\r\n            </ListItemText>\r\n          </ListItem> : <></>\r\n        }\r\n\r\n        <ListDivider />\r\n        \r\n        {loading ? <LinearProgress /> : <></>}\r\n        {error ? <><p>Error :(</p><span>{error.message}</span></> : <></>}\r\n        <ListItem>\r\n          <ListItemText>Total\r\n            <ListItemSecondaryText>with tip: {`€ ${totalWithTips.toFixed(2)}`} </ListItemSecondaryText>\r\n          </ListItemText>\r\n          <ListItemMeta tag=\"span\" basename=\"\" >{`€ ${total.toFixed(2)}`}</ListItemMeta>\r\n        </ListItem>\r\n\r\n        <ListDivider />\r\n      </List>\r\n\r\n      <table style={{width: '100%'}}>\r\n        <tbody>\r\n          <tr>\r\n            <Pagination rowsPerPageOptions={[]} count={ordered.length} rowsPerPage={itemsPerPage} page={page} onChangePage={(_, newPage) => setPage(newPage)} />\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </Elevation>\r\n  )\r\n}\r\n\r\nexport default History","import React from 'react';\r\nimport {Elevation} from '@rmwc/elevation';\r\nimport {\r\n  Toolbar,\r\n  ToolbarRow,\r\n  ToolbarSection,\r\n  ToolbarTitle\r\n} from '@rmwc/toolbar';\r\nimport {\r\n  List\r\n} from '@rmwc/list';\r\n\r\nimport {SimpleListItem} from '@rmwc/list';\r\n\r\nconst ExtraCard = (props) => {\r\n  const {openDialog} = props\r\n  return (\r\n    <Elevation className=\"main-elevation\" z={24} style={{margin: \"1rem\"}}>\r\n      <Toolbar>\r\n        <ToolbarRow>\r\n          <ToolbarSection alignStart>\r\n            <ToolbarTitle>{props.typeName}</ToolbarTitle>\r\n          </ToolbarSection>\r\n        </ToolbarRow>\r\n      </Toolbar>\r\n      <List twoLine>\r\n        {props.extras.map(d =>\r\n          <SimpleListItem key={d._id}\r\n            onClick={() => openDialog(d)}\r\n            text={d.name}\r\n            secondaryText={`€ ${d.cost.toFixed(2)}`}\r\n            metaIcon=\"edit\" />\r\n        )}\r\n      </List>\r\n    </Elevation>\r\n  )\r\n}\r\n\r\nexport default ExtraCard","import React, {useState, useEffect} from 'react';\r\nimport {useMutation} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogButton\r\n} from '@rmwc/dialog'\r\nimport {TextField} from '@rmwc/textfield';\r\nimport {Select} from '@rmwc/select';\r\n\r\nconst ADD = gql` mutation add($name: String!, $cost: Float!, $type: ID!){\r\n addDishExtra(name: $name, cost: $cost, type: $type) {\r\n   _id, \r\n   name\r\n }\r\n}`\r\nconst UPDATE = gql`mutation update($id: ID!, $name: String!, $cost: Float!, $type: ID!){\r\n updateDishExtra(_id: $id, name: $name, cost: $cost, type: $type) {\r\n   _id, \r\n   name\r\n }\r\n}`\r\nconst REMOVE = gql`mutation remove($id: ID!){\r\n removeDishExtra(_id: $id, ) {\r\n   _id, \r\n   name\r\n }\r\n}`\r\n\r\nfunction toggleDialog(setName, setCost, setType, props) {\r\n  setName(props.name || '')\r\n  setCost(props.cost || 0)\r\n  setType(props.type ? props.type._id : '')\r\n}\r\n\r\nconst ExtraDialog = (props) => {\r\n  const [name, setName] = useState(props.name || '')\r\n  const [cost, setCost] = useState(props.cost ? props.cost.toFixed(2) : 0)\r\n  const [type, setType] = useState(props.type ? props.type._id : '')\r\n\r\n  useEffect(() => {\r\n    setName(props.name || '')\r\n    setCost(props.cost ? props.cost.toFixed(2) : 0)\r\n    setType(props.type ? props.type._id : '')\r\n  }, [props.name, props.cost, props.type])\r\n\r\n  const isNewExtra = !props._id\r\n  const [remove] = useMutation(REMOVE)\r\n  const [addOrUpdate] = useMutation(isNewExtra ? ADD : UPDATE)\r\n  return (\r\n    <Dialog\r\n      open={props.open}\r\n      onClose={() => {\r\n        toggleDialog(setName, setCost, setType, props)\r\n        props.onClose()\r\n      }}\r\n    >\r\n      <DialogTitle>{!isNewExtra ? `Edit ${props.name}` : \"New extra for dish type\"}</DialogTitle>\r\n      <DialogContent>\r\n        <TextField type=\"text\" label=\"Name\" value={name} onChange={(e) => setName(e.target.value || '')} />\r\n        <TextField type=\"number\" inputMode=\"numeric\" label=\"Cost\" invalid={false} value={cost} onChange={(e) => setCost(e.target.value)} />\r\n        <Select value={type} onChange={(e) => setType(e.target.value)} placeholder=\"\" label=\"Dish type\" options={props.dishTypes} />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <DialogButton theme=\"secondary\" action=\"cloase\" isDefaultAction>Cancel</DialogButton>\r\n        <DialogButton action=\"accept\" onClick={() => remove({variables: {id: props._id}})} disabled={isNewExtra}>\r\n          Delete\r\n        </DialogButton >\r\n        <DialogButton action=\"accept\" onClick={() => {\r\n          addOrUpdate({\r\n            variables: {\r\n              id: props._id,\r\n              name: name,\r\n              type: type,\r\n              cost: parseFloat(cost)\r\n            }\r\n          })\r\n        }}>\r\n          Save\r\n        </DialogButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ExtraDialog","import React, {useState} from 'react';\r\nimport {useQuery} from '@apollo/react-hooks';\r\nimport {gql} from 'apollo-boost';\r\nimport Masonry from 'react-masonry-component';\r\nimport {Fab} from '@rmwc/fab';\r\nimport {LinearProgress} from '@rmwc/linear-progress';\r\nimport {observer, inject} from \"mobx-react\";\r\n\r\nimport ExtraCard from \"../components/extras/ExtraCard\";\r\nimport ExtraDialog from \"../components/extras/ExtraDialog\";\r\n\r\nconst GET_DISH_TYPES = gql`\r\nquery dishTypes {\r\n  dishTypes {\r\n    _id,\r\n    name\r\n  }\r\n}`\r\n\r\nconst GET_DISH_EXTRAS = gql`\r\n{\r\n  dishExtras {\r\n    _id, \r\n    name, \r\n    cost, \r\n    type {\r\n      _id,\r\n      name\r\n    }\r\n  }\r\n}`\r\n\r\nconst groupBy = (xs, func) => (\r\n  xs.reduce((rv, x) => {\r\n    (rv[func(x)] = rv[func(x)] || []).push(x);\r\n    return rv;\r\n  }, {})\r\n)\r\n\r\nconst openDialog = (setExtra, setOpenDialog) => (extra) => {\r\n  setExtra(extra)\r\n  setOpenDialog(true)\r\n}\r\n\r\nconst DishExtra = (props) => {\r\n  const [isDialogOpen, setOpenDialog] = useState(false)\r\n  const [extra, setExtra] = useState({})\r\n  const filter = props.store.searchText\r\n  const matchesFilter = new RegExp(filter, \"i\")\r\n\r\n  const dishTypesResult = useQuery(GET_DISH_TYPES, {pollInterval: 10000})\r\n  let dishTypes = []\r\n  if (dishTypesResult.data && dishTypesResult.data.dishTypes)\r\n    dishTypes = dishTypesResult.data.dishTypes.map(d => {return {label: d.name, value: d._id}})\r\n\r\n  const {loading, error, data = {dishExtras: []}} = useQuery(GET_DISH_EXTRAS, {pollInterval: 1000})\r\n\r\n  const grouped = groupBy(data.dishExtras.filter(o => {\r\n    return (!filter || matchesFilter.test(o.name) || matchesFilter.test(o.type.name))\r\n  }), d => d.type.name)\r\n\r\n  const groupedExtras = []\r\n  for (const group in grouped) {\r\n    groupedExtras.push(<div\r\n      key={grouped[group][0]._id}\r\n      style={{\r\n        width: '-webkit-fill-available',\r\n        maxWidth: '500px',\r\n        minWidth: '320px'\r\n      }}>\r\n      <ExtraCard typeName={group} extras={grouped[group]} dishTypes={dishTypes} openDialog={openDialog(setExtra, setOpenDialog)} />\r\n    </div>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loading ? <LinearProgress /> : <></>}\r\n      {error ? <><p>Error :(</p><span>{error.message}</span></> : <></>}\r\n      <React.Fragment>\r\n        <Masonry id=\"masonry-layout\">\r\n          {groupedExtras}\r\n        </Masonry>\r\n        <Fab className=\"floating-right\" icon=\"add\" onClick={() => openDialog(setExtra, setOpenDialog)({})} />\r\n      </React.Fragment>\r\n      <ExtraDialog\r\n        {...extra}\r\n        open={isDialogOpen}\r\n        dishTypes={dishTypes}\r\n        onClose={() => setOpenDialog(false)}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default inject(\"store\")(observer(DishExtra))","import React, { Component } from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport './App.css';\r\n\r\nimport Nav from './components/navigation/Nav'\r\nimport Orders from './pages/Orders'\r\nimport OrderDetails from './pages/OrderDetails'\r\nimport PayOrder from './pages/PayOrder'\r\nimport Dishes from './pages/Dishes'\r\nimport Settings from './pages/Settings'\r\nimport Hist from './pages/History'\r\nimport Extras from './pages/DishExtra'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Nav />\r\n        \r\n        <div className=\"mdc-top-app-bar--fixed-adjust\">\r\n          <Route exact path=\"/\" component={ Orders } />\r\n          <Route path=\"/orders\" component={ Orders } />\r\n          <Route path=\"/orderDetails/:id?\" component={OrderDetails} />\r\n          <Route path=\"/payOrder/:id\" component={PayOrder} />\r\n          <Route path=\"/dishes\" component={Dishes} />\r\n          <Route path=\"/settings\" component={Settings} />\r\n          <Route path=\"/orderHistory\" component={Hist} />\r\n          <Route path=\"/dishExtra\" component={Extras} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  observable,\r\n  decorate\r\n} from \"mobx\"\r\n\r\nclass Store {\r\n  searchText = \"\"\r\n  kitchenMode = localStorage.getItem(\"Bit.KitchenMode\") === \"true\" || false\r\n \r\n  setKitchenMode(isOn) {\r\n    this.kitchenMode = isOn;\r\n    localStorage.setItem(\"Bit.KitchenMode\", isOn);\r\n  }\r\n}\r\n\r\ndecorate(Store, {\r\n  searchText: observable,\r\n  kitchenMode: observable\r\n})\r\n\r\nlet DefaultStore = new Store()\r\n\r\nexport default DefaultStore","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Provider } from \"mobx-react\"\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport Store from \"./stores/Store\"\r\nimport { ThemeProvider } from '@rmwc/theme';\r\n\r\nconst client = new ApolloClient();\r\n\r\nconst stores = {\r\n  store: Store\r\n}\r\n\r\nReactDOM.render(  \r\n  <ThemeProvider options = {\r\n    {\r\n      primary: '#795548',\r\n      secondary: '#486c79',\r\n      background: '#fff'\r\n    }\r\n  } >\r\n    <ApolloProvider client={client}>\r\n      <Provider {...stores}>\r\n        <Router>\r\n          <App />\r\n        </Router>\r\n      </Provider>\r\n    </ApolloProvider>\r\n  </ThemeProvider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}